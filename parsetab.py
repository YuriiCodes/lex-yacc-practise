
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEnonassocUMINUSleftEXPONENTrightSQRTleftMODDIVIDE EXPONENT LPAREN MINUS MOD NUMBER PLUS RPAREN SQRT TIMESexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : expression EXPONENT expressionexpression : expression MOD expressionexpression : SQRT LPAREN expression RPAREN'
    
_lr_action_items = {'MINUS':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,],[2,7,2,2,-7,2,2,2,2,2,2,-5,7,2,-1,-2,-3,-4,-8,-9,-6,7,-10,]),'LPAREN':([0,2,3,5,6,7,8,9,10,11,14,],[3,3,3,14,3,3,3,3,3,3,3,]),'NUMBER':([0,2,3,6,7,8,9,10,11,14,],[4,4,4,4,4,4,4,4,4,4,]),'SQRT':([0,2,3,6,7,8,9,10,11,14,],[5,5,5,5,5,5,5,5,5,5,]),'$end':([1,4,12,15,16,17,18,19,20,21,23,],[0,-7,-5,-1,-2,-3,-4,-8,-9,-6,-10,]),'PLUS':([1,4,12,13,15,16,17,18,19,20,21,22,23,],[6,-7,-5,6,-1,-2,-3,-4,-8,-9,-6,6,-10,]),'TIMES':([1,4,12,13,15,16,17,18,19,20,21,22,23,],[8,-7,-5,8,8,8,-3,-4,-8,-9,-6,8,-10,]),'DIVIDE':([1,4,12,13,15,16,17,18,19,20,21,22,23,],[9,-7,-5,9,9,9,-3,-4,-8,-9,-6,9,-10,]),'EXPONENT':([1,4,12,13,15,16,17,18,19,20,21,22,23,],[10,-7,10,10,10,10,10,10,-8,-9,-6,10,-10,]),'MOD':([1,4,12,13,15,16,17,18,19,20,21,22,23,],[11,-7,11,11,11,11,11,11,11,-9,-6,11,-10,]),'RPAREN':([4,12,13,15,16,17,18,19,20,21,22,23,],[-7,-5,21,-1,-2,-3,-4,-8,-9,-6,23,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,6,7,8,9,10,11,14,],[1,12,13,15,16,17,18,19,20,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','yacc_parser.py',25),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','yacc_parser.py',26),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','yacc_parser.py',27),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','yacc_parser.py',28),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','yacc_parser.py',40),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','yacc_parser.py',45),
  ('expression -> NUMBER','expression',1,'p_expression_number','yacc_parser.py',50),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_exponent','yacc_parser.py',55),
  ('expression -> expression MOD expression','expression',3,'p_expression_mod','yacc_parser.py',59),
  ('expression -> SQRT LPAREN expression RPAREN','expression',4,'p_expression_sqrt','yacc_parser.py',63),
]
