Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assignment
Rule 2     statement -> expression
Rule 3     assignment -> IDENTIFIER EQUALS expression
Rule 4     expression12 -> expression PLUS expression
Rule 5     expression12 -> expression MINUS expression
Rule 6     expression12 -> expression TIMES expression
Rule 7     expression12 -> expression DIVIDE expression
Rule 8     expression -> MINUS expression
Rule 9     expression -> LPAREN expression RPAREN
Rule 10    expression -> NUMBER
Rule 11    expression -> expression EXPONENT expression
Rule 12    expression -> IDENTIFIER

Terminals, with rules where they appear

DIVIDE               : 7
EQUALS               : 3
EXPONENT             : 11
IDENTIFIER           : 3 12
LPAREN               : 9
MINUS                : 5 8
NUMBER               : 10
PLUS                 : 4
RPAREN               : 9
TIMES                : 6
error                : 

Nonterminals, with rules where they appear

assignment           : 1
expression           : 2 3 4 4 5 5 6 6 7 7 8 9 11 11
expression12         : 
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assignment
    (2) statement -> . expression
    (3) assignment -> . IDENTIFIER EQUALS expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . expression EXPONENT expression
    (12) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    statement                      shift and go to state 1
    assignment                     shift and go to state 2
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> assignment .

    $end            reduce using rule 1 (statement -> assignment .)


state 3

    (2) statement -> expression .
    (11) expression -> expression . EXPONENT expression

    $end            reduce using rule 2 (statement -> expression .)
    EXPONENT        shift and go to state 8


state 4

    (3) assignment -> IDENTIFIER . EQUALS expression
    (12) expression -> IDENTIFIER .

    EQUALS          shift and go to state 9
    EXPONENT        reduce using rule 12 (expression -> IDENTIFIER .)
    $end            reduce using rule 12 (expression -> IDENTIFIER .)


state 5

    (8) expression -> MINUS . expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . expression EXPONENT expression
    (12) expression -> . IDENTIFIER

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 10

state 6

    (9) expression -> LPAREN . expression RPAREN
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . expression EXPONENT expression
    (12) expression -> . IDENTIFIER

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 12

state 7

    (10) expression -> NUMBER .

    EXPONENT        reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)
    RPAREN          reduce using rule 10 (expression -> NUMBER .)


state 8

    (11) expression -> expression EXPONENT . expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . expression EXPONENT expression
    (12) expression -> . IDENTIFIER

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 13

state 9

    (3) assignment -> IDENTIFIER EQUALS . expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . expression EXPONENT expression
    (12) expression -> . IDENTIFIER

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 14

state 10

    (8) expression -> MINUS expression .
    (11) expression -> expression . EXPONENT expression

    $end            reduce using rule 8 (expression -> MINUS expression .)
    RPAREN          reduce using rule 8 (expression -> MINUS expression .)
    EXPONENT        shift and go to state 8

  ! EXPONENT        [ reduce using rule 8 (expression -> MINUS expression .) ]


state 11

    (12) expression -> IDENTIFIER .

    EXPONENT        reduce using rule 12 (expression -> IDENTIFIER .)
    $end            reduce using rule 12 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 12 (expression -> IDENTIFIER .)


state 12

    (9) expression -> LPAREN expression . RPAREN
    (11) expression -> expression . EXPONENT expression

    RPAREN          shift and go to state 15
    EXPONENT        shift and go to state 8


state 13

    (11) expression -> expression EXPONENT expression .
    (11) expression -> expression . EXPONENT expression

    EXPONENT        reduce using rule 11 (expression -> expression EXPONENT expression .)
    $end            reduce using rule 11 (expression -> expression EXPONENT expression .)
    RPAREN          reduce using rule 11 (expression -> expression EXPONENT expression .)

  ! EXPONENT        [ shift and go to state 8 ]


state 14

    (3) assignment -> IDENTIFIER EQUALS expression .
    (11) expression -> expression . EXPONENT expression

    $end            reduce using rule 3 (assignment -> IDENTIFIER EQUALS expression .)
    EXPONENT        shift and go to state 8


state 15

    (9) expression -> LPAREN expression RPAREN .

    EXPONENT        reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (expression -> LPAREN expression RPAREN .)

